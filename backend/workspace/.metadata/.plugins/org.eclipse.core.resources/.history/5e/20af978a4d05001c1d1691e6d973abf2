package com.github.henrique.avaliacaojava.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import com.github.henrique.avaliacaojava.dto.AlunoDto;
import com.github.henrique.avaliacaojava.mapper.AlunoMapper;
import com.github.henrique.avaliacaojava.models.Aluno;
import com.github.henrique.avaliacaojava.repository.AlunoRepository;

@Service
public class AlunoService implements AlunoMapper {

	@Autowired
	private AlunoRepository alunoRepository;

	@Autowired
	private AlunoMapper alunoMapper;

	@Transactional
	public Aluno save(AlunoDto alunoDto) {
		return alunoRepository.save(alunoMapper.toModel(alunoDto));
	}

	@Transactional(readOnly = true)
	public Aluno findById(Integer id) {
		return alunoRepository.findById(id)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Aluno n√£o encontrado"));
	}

	public void deletar(Integer id) {
		Aluno aluno = findById(id);
		alunoRepository.delete(aluno);
	}

	public void update(Integer id, AlunoDto alunoDtoNovo) {
		Aluno alunoSalvo = findById(id);
		Aluno aluno = alunoMapper.toModel(alunoDtoNovo);
		aluno.setId(alunoSalvo.getId());

		alunoRepository.save(aluno);
	}

	@Transactional(readOnly = true)
	public List<Aluno> findAll() {
		return alunoRepository.findAll();
	}

	@Transactional(readOnly = true)
	public Page<Aluno> findAll(Pageable pageable) {
		return alunoRepository.findAll(pageable);
	}
	
	
	public void realizarCalculoSituacaoAluno(Long ano, Integer id) {
		Aluno aluno = findById(id);
		
		
		
		
		
	}
	
	
	
	

	@Override
	public Aluno toModel(AlunoDto alunoDto) {
		if (alunoDto == null) {
			return null;
		}

		Aluno aluno = new Aluno();
		aluno.setNome(alunoDto.getNome());

		if (alunoDto.getSituacao() != null && !alunoDto.getSituacao().isEmpty()) {
			aluno.setSituacao(alunoDto.getSituacao());
		}

		return aluno;
	}

	@Override
	public AlunoDto toDto(Aluno aluno) {
		// TODO Auto-generated method stub
		return null;
	}

}
